;; -*- emacs-lisp -*-
(setq mew-summary-mode-hook
      '(lambda ()
	 (local-set-key "\C-h" 'mew-summary-prev-page)
	 ))

(setq mew-ssl-verify-level 0
      ;; Does not bring mail automatically at booting time
      mew-auto-get nil
      ;; Leave mail of pop server after get mail
      mew-pop-delete nil
      ;; Add extension ".mew"
      mew-use-suffix t
      ;; Manage unread topic
      mew-use-unread-mark t
      ;; Spam configuration
      mew-spam: "X-Spam-Flag:"
      mew-inbox-action-alist
      '(("X-Spam-Flag:" mew-spam-assassin-or-bsfilter))
      ;; Register password briefly
      mew-use-cached-passwd t
      ;; Does not bring mail at booting time
      mew-auto-get nil
      ;; For Biff
      mew-use-biff t
      mew-use-biff-bell t  ; use alarm
      mew-biff-interval 10 ; minute
      mew-biff-function 'my/biff-function
      ;mew-summary-form '(type (5 date) " " (25 from) " " t (45 subj))
      mew-summary-form '(type (5 date) " " (25 from) " " t (-1 subj))
      mew-imap-size 0
      )

(defvar mew/gmail-default-alist
  `(("proto"             . "%")
    ("name"              . "Shigeru Yoshida")
    ("user"              . "yshigeru")
    ("imap-user"         . "yshigeru")
    ("mail-domain"       . "gmail.com")
    ("imap-trash-folder" . "%[Gmail]/ゴミ箱")
    ("imap-spam-folder"  . "%[Gmail]/迷惑メール")
    ("fcc"               . "%[Gmail]/送信済みメール")
    ("imap-server"       . "imap.gmail.com")
    ("imap-auth"         . t)
    ("imap-ssl"          . t)
    ("imap-ssl-port"     . "993")
    ("smtp-auth"         . t)
    ("smtp-ssl"          . t)
    ("smtp-ssl-port"     . "465")
    ("smtp-server"       . "smtp.gmail.com")
    ("use-smtp-auth"     . t)
    ("dcc"               . "yshigeru@gmail.com")
    ))

(defvar mew/gmail-lkml-alist
  `(("proto"             . "%")
    ("name"              . "Shigeru Yoshida")
    ("user"              . "shigeru.yoshida")
    ("imap-user"         . "shigeru.yoshida")
    ("mail-domain"       . "gmail.com")
    ("imap-trash-folder" . "%[Gmail]/ゴミ箱")
    ("imap-spam-folder"  . "%[Gmail]/迷惑メール")
    ("fcc"               . "%[Gmail]/送信済みメール")
    ("imap-server"       . "imap.gmail.com")
    ("imap-auth"         . t)
    ("imap-ssl"          . t)
    ("imap-ssl-port"     . "993")
    ("smtp-auth"         . t)
    ("smtp-ssl"          . t)
    ("smtp-ssl-port"     . "465")
    ("smtp-server"       . "smtp.gmail.com")
    ("use-smtp-auth"     . t)
    ("dcc"               . "shigeru.yoshida@gmail.com")
    ))

(defvar mew/gmail-miracle-alist
  `(("proto"             . "%")
    ("name"              . "Shigeru Yoshida")
    ("user"              . "shigeru.yoshida")
    ("imap-user"         . "shigeru.yoshida@miraclelinux.com")
    ("mail-domain"       . "miraclelinux.com")
    ("imap-trash-folder" . "%[Gmail]/ゴミ箱")
    ("imap-spam-folder"  . "%[Gmail]/迷惑メール")
    ("fcc"               . "%[Gmail]/送信済みメール")
    ("imap-server"       . "imap.googlemail.com")
    ("imap-auth"         . t)
    ("imap-ssl"          . t)
    ("imap-ssl-port"     . "993")
    ("smtp-auth"         . t)
    ("smtp-ssl"          . t)
    ("smtp-ssl-port"     . "465")
    ("smtp-server"       . "smtp.googlemail.com")
    ("use-smtp-auth"     . t)
    ("dcc"               . "shigeru.yoshida@miraclelinux.com")
    ))

(defvar mew/windriver-exchange-alist
  `(("proto"             . "%")
    ("name"              . "Shigeru Yoshida")
    ("user"              . "shigeru.yoshida")
    ("mail-domain"       . "windriver.com")
    ("imap-user"         . "CORP\\syoshida")
    ("imap-server"       . "localhost")
    ("imap-port"         . "1143")
    ("imap-ssl"          . nil)
    ("imap-auth"         . t)
    ("imap-trash-folder" . "%Trash")
    ("imap-spam-folder"  . "%Junk")
;    ("fcc"               . "%Sent")
    ("fcc"               . nil)
    ("smtp-user"         . "CORP\\syoshida")
    ("smtp-server"       . "localhost")
    ("smtp-port"         . "1025")
    ("smtp-ssl"          . nil)
    ("smtp-auth"         . t)
    ("dcc"               . "shigeru.yoshida@windriver.com")
    ))

(defvar mew/windriver-imap-alist
  `(("proto"             . "%")
    ("name"              . "Shigeru Yoshida")
    ("user"              . "shigeru.yoshida")
    ("mail-domain"       . "windriver.com")
    ("imap-user"         . "CORP\\syoshida")
    ("imap-server"       . "prod-webmail.corp.ad.wrs.com")
    ("imap-port"         . "143")
    ("imap-ssl"          . t)
    ("imap-auth"         . t)
    ("imap-trash-folder" . "%Trash")
    ("imap-spam-folder"  . "%Junk")
    ;("fcc"               . "%Sent")
    ("smtp-user"         . "CORP\\syoshida")
    ("smtp-server"       . "prod-webmail.corp.ad.wrs.com")
    ("smtp-port"         . "submission")
    ("smtp-ssl"          . t)
    ("smtp-ssl-port"     . "submission")
    ("smtp-auth"         . t)
    ("dcc"               . "shigeru.yoshida@windriver.com")
    ))


;; Switch to account by types "C" and renew summary by types "i"
(setq mew-config-alist
      (list `("default" ,@mew/gmail-lkml-alist)
	    `("gmail" ,@mew/gmail-default-alist)
	    `("miracle" ,@mew/gmail-miracle-alist)
	    `("windriver" ,@mew/windriver-exchange-alist)
	    `("windriver-imap" ,@mew/windriver-imap-alist)
	    ))

(setq mew-refile-guess-alist
      '(("To:"
	 ("linux-riscv@lists\\.infradead\\.org"	"%linux-riscv")
	 ;("linux-kernel@vger.kernel.org"	"%LKML")
	 )
	("Cc:"
	 ("linux-riscv@lists\\.infradead\\.org"	"%linux-riscv")
	 ;("linux-kernel@vger.kernel.org"	"%LKML")
	 )
	;(t "%[Gmail]/すべてのメール")
	))

(defadvice mew-input-folder-search-forward-1
  (around
   mew-input-folder-search-forward-1-with-migemo
   activate)
  "migemo を使ってフォルダ名を検索する。"
  (let ((migemo-do-isearch t))
    ad-do-it))

(setq mew-refile-guess-control
      '(mew-refile-guess-by-alist
	mew-refile-ctrl-auto-boundary
	mew-refile-ctrl-throw
	mew-refile-guess-by-newsgroups
	mew-refile-guess-by-folder
	mew-refile-ctrl-throw
	mew-refile-guess-by-thread
	mew-refile-ctrl-throw
	mew-refile-guess-by-from-folder
	mew-refile-ctrl-throw
	mew-refile-guess-by-from
	mew-refile-ctrl-throw
	mew-refile-guess-by-default
	))

(setq mew-header-reasonable-size 100000)

;; 引用する際のヘッダ
(setq mew-cite-strings-function
      (lambda ()
        (let* ((date (mew-cite-get-value mew-date:))
               (from (mew-cite-get-value mew-from:))
               (cite-from1 (cond
			    ((and from (string-match "\"?\\([^\"]+\\)?\"?\\s-*<\\(.+\\)>" from))
			     (or (match-string 1 from) (match-string 2 from)))
			    (t "Unknown")))
	       (cite-from2 (if (string-match "\\(\\s-+\\)$" cite-from1)
			       (substring cite-from1 0 (match-beginning 0))
			     cite-from1)))
          (format "\nOn %s, %s wrote:\n" date cite-from2))))

(setq mew-search-method 'est)

;; ローカル時刻を表示
(defvar mew-my-message-date-overlay nil)

(defun mew-my-message-date-overlay ()
  (or
   mew-my-message-date-overlay
   (setq mew-my-message-date-overlay
         (make-overlay (point-min) (point-min)))))

(defun mew-my-message-display-local-date ()
  (condition-case err
      (save-excursion
        (goto-char (point-min))
        (when (re-search-forward (concat "^" mew-date: " *\\(.*\\)") nil t)
          (let* ((original (match-string 1))
                 (start (match-beginning 1))
                 (end (match-end 1))
                 (ov (mew-my-message-date-overlay))
                 (time (parse-time-string original))
                 (orig-tz (nth 8 time))
                 (tz (nth 8 (decode-time (current-time))))
                 (date (apply 'encode-time time))
                 (local (mew-time-ctz-to-rfc date)))
            (unless (equal orig-tz tz)
              (let ((new (format "%s == %s" local original)))
                (move-overlay ov start end (current-buffer))
                (overlay-put ov 'display new))))))
    (error
     (message "%s" err))))

(add-hook 'mew-message-hook 'mew-my-message-display-local-date)

;; 表示しないヘッダの設定
(setq mew-field-spec
      (append '(("^Received-SPF" nil)
		("^IronPort-PHdr" nil)
		("^Thread-Topic" nil)
		("^Thread-Index" nil)
		("^ARC-Seal" nil)
		("^ARC-Message-Signature" nil)
		("^ARC-Authentication-Results" nil)
		)
	      mew-field-spec))

(setq mew-draft-mode-newdraft-hook 'mew-draft-insert-signature)
(setq mew-signature-insert-last t)

(condition-case nil
    (require 'mew-w3m)
  (file-error nil))

(setq mew-prog-msword-ext "soffice")
(setq mew-prog-msexcel-ext "soffice")
(setq mew-prog-mspowerpoint-ext "soffice")
(setq mew-prog-pdf "evince")
